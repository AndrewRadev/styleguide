= Christian Neukirchen's Ruby Style Guide

This is a fork of Christian Neukirchen's Ruby Style Guide, with some of my
personal preferences. The original can be found
[here](https://github.com/chneukirchen/styleguide).

I've removed some obvious stuff, like 2-space indent, to avoid unnecessary
clutter.


== Formatting:

* Use ASCII (or UTF-8, if you have to).

* Use Unix-style line endings.

* Use spaces around operators, after commas, colons and semicolons,
  around { and before }.

* No spaces after (, [ and before ], ), unless there are several levels of
  nesting for whatever reason.

* Indent when as deep as case.

* Use an empty line before the return value of a method (unless it
  only has one or two lines), and an empty line between defs.

* Use simple text for API documentation. Don't put an
  empty line between the comment block and the def, but consider an empty
  comment line if the comment is large.

* Use empty lines to break up a long method into logical paragraphs.

* Keep lines fewer than 100 characters.

* Avoid trailing whitespace like the plague.


== Syntax:

* Use def with parentheses when there are arguments.

* Never use for, unless you exactly know why.

* Avoid multiline ?:, use if. In fact, avoid ?: in general, if is usually more readable.

* Prefer to not use complex assignments. When you do, place the multiline part
  on the next line:

    some_value =
      if foo?
        bar
      else
        baz
      end

  Or simply:

    if foo?
      some_value = bar
    else
      some_value = baz
    end

* Use parentheses when calling methods when they're worded as commands or look
  like "functions". For example:

    x = Math.sin(y)
    user = User.find(3)
    point.translate(0, 1)

  Avoid parentheses when the method call has a DSL feel and is alone on the
  line, like:

    has_many :users
    link_to "Foo", bar_path
    collection.include? 3

* Avoid return where not required.

* Avoid line continuation (\) where not required.

* Using the return value of = is okay, but put it in brackets to draw attention to it:

    if (v = array.grep(/foo/))
      puts v
    end

* Use ||= freely.

* Use non-OO regexps (they won't make the code better).  Freely use
  =~, $0-9, $~, $` and $' when needed.

* Don't use unless, if not is more straightforward.


== Naming:

* Use snake_case for methods.

* Use CamelCase for classes and modules.  (Keep acronyms like HTTP,
  RFC, XML uppercase.)

* The length of an identifier determines its scope.  Use one-letter
  variables for short block/method parameters, according to this
  scheme:

    f: files and file names
    i,j: indexes
    k: the key part of a hash entry
    o: any object
    s: strings
    v: the value part of a hash entry
    x,y,z: numbers

  And in general, the first letter of the class name if all objects
  are of that type.

* Use _ or names prefixed with _ for unused variables.

* When defining binary operators, name the argument "other".

* Prefer map over collect, find over detect, find_all over select,
  size over length.

* Methods that start with "find_", "get_", "fetch_" or similar verbs are
  methods that do a relatively expensive operation. Methods that don't can be
  considered "attributes", as in, they can be accessed multiple times without a
  performance hit. Think "find_friends" vs "friends".


== Comments:

* Comments longer than a sentence are capitalized and use punctuation.

* Avoid superfluous comments.


== General:

* Be consistent.

* Code in a functional way, avoid mutation when it makes sense.

* Do not mutate arguments unless that is the purpose of the method.

* Do not mess around in core classes when writing libraries.

* Keep the code simple.

* Don't overdesign.

* Don't underdesign.

* Avoid bugs.

* Read other style guides and apply the parts that don't dissent with
  this list.

* Use common sense.
